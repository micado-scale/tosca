tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - https://raw.githubusercontent.com/micado-scale/tosca/master/micado_types.yaml

repositories:
  docker_hub: https://hub.docker.com/

description: ADT for face-detection demo application on EC2/Laptop/Raspberry Pi

topology_template:
  inputs:
    ports:
      type: list
      default: [4092, 4093, 4094, 4095, 4096, 4097]
    reccount:
      type: integer
      default: 6
    clienthosts:
      type: list
      default: [piedge]
    clientcount:
      type: integer
      default: 1
    ip_fog_node:
      type: string
      default: 00.000.000.000
    ip_pi_node:
      type: string
      default: 00.000.000.000
    ip_cloud_node:
      type: string
      default: 000.000.000.000
  node_templates:
    fd-pi-client:
      type: tosca.nodes.MiCADO.Container.Application.Docker.Deployment
      occurrences: [1, UNBOUNDED]
      instance_count: { get_input: clientcount }
      properties:
        image: uowcpc/fd-pi-client
        securityContext:
          privileged: True
        env:
        - name: LD_LIBRARY_PATH
          value: /opt/vc/lib
        - name: REMOTE_HOST
          value: { get_input: ip_fog_node }
        - name: REMOTE_PORT
          value: { get_input: [ ports, INDEX ] }
        - name: BUFFER_SIZE
          value: "1024"
        - name: DELAY_BW_MSGS
          value: "0.1"
        - name: DELAY_BW_IMAGES
          value: "1.0"
      requirements:
      - host: { get_input: [ clienthosts, INDEX ] }
      - volume: docker-pi-vc-host-vol
      - volume: docker-pi-device-host-vol
    fd-receiver:
      type: tosca.nodes.MiCADO.Container.Application.Docker.Deployment
      occurrences: [1, UNBOUNDED]
      instance_count: { get_input: reccount }
      properties:
        image: uowcpc/fd-edge-receiver
        env:
        - name: PORT
          value: { get_input: [ ports, INDEX ] }
        - name: BUFFER_SIZE
          value: "1024"
        - name: SOCKET_TIMEOUTd
          value: "0.3"
        ports:
        - containerPort: { get_input: [ ports, INDEX ] }
          hostPort: { get_input: [ ports, INDEX ] }
          protocol: 'UDP'
      requirements:
      - host: fogedge
      - volume: docker-edge-images-host-vol

    fd-processor:
      type: tosca.nodes.MiCADO.Container.Application.Docker.Deployment
      properties:
        image: uowcpc/fd-edge-processor
        env:
        - name: SLEEP_PERIOD
          value: "2.0"
      requirements:
      - host: fogedge
      - volume: docker-edge-grey-images-host-vol
      - volume: docker-edge-images-host-vol

    fd-sender:
      type: tosca.nodes.MiCADO.Container.Application.Docker.Deployment
      properties:
        image: uowcpc/fd-edge-sender
        env:
        - name: REMOTE_HOST
          value: { get_input: ip_cloud_node }
        - name: REMOTE_PORT
          value: "4097"
        - name: BUFFER_SIZE
          value: "1024"
        - name: DELAY_BW_MSGS
          value: "0.1"
        - name: SLEEP_IF_NOTHING_TO_SEND
          value: "2.0"
      requirements:
      - host: fogedge
      - volume: docker-edge-grey-images-host-vol

    fd-cloud:
      type: tosca.nodes.MiCADO.Container.Application.Docker.Deployment
      properties:
        image: uowcpc/fd-cloud
        env:
        - name: PORT
          value: "4097"
        - name: BUFFER_SIZE
          value: "1024"
        - name: SOCKET_TIMEOUT
          value: "0.3"
        - name: MAX_NO_OF_IMAGES
          value: "100"
        ports:
        - containerPort: 4097
          hostPort: 4097
          protocol: 'UDP'
      requirements:
      - host: cloudedge
      - volume: docker-cloud-images-host-vol

    docker-pi-vc-host-vol:
      type: tosca.nodes.MiCADO.Container.Volume.HostPath
      properties:
        path: /opt/vc    
    docker-pi-device-host-vol:
      type: tosca.nodes.MiCADO.Container.Volume.HostPath
      properties:
        path: /dev/vchiq
    docker-dummy-client-static-images-host-vol:
      type: tosca.nodes.MiCADO.Container.Volume.HostPath
      properties:
        path: /var/lib/fd-dummy-client/staticImages    
    docker-edge-images-host-vol:
      type: tosca.nodes.MiCADO.Container.Volume.HostPath
      properties:
        path: /var/lib/fd-edge/images
    docker-edge-grey-images-host-vol:
      type: tosca.nodes.MiCADO.Container.Volume.HostPath
      properties:
        path: /var/lib/fd-edge/greyImages
    docker-cloud-images-host-vol:
      type: tosca.nodes.MiCADO.Container.Volume.HostPath
      properties:
        path: /var/lib/fd-cloud/images

    fogedge:
      type: tosca.nodes.MiCADO.Edge
      properties:
        public_ip: { get_input: ip_fog_node }
    piedge:
      type: tosca.nodes.MiCADO.Edge
      properties:
        public_ip: { get_input: ip_pi_node }
    cloudedge:
      type: tosca.nodes.MiCADO.Edge
      properties:
        public_ip: { get_input: ip_cloud_node }

  policies:
    - monitoring:
        type: tosca.policies.Monitoring.MiCADO
        properties:
          enable_container_metrics: true
          enable_node_metrics: true
    - scalability:
        type: tosca.policies.Scaling.MiCADO.Container.Network.fd-processor
        targets: [ fd-processor ]
        properties:
          sources:
          - 00.000.000.000:8080
          - 00.000.000.000.246:9100
          constants:
            SERVICE_NAME: 'fd-processor'
            SERVICE_FULL_NAME: 'fd-processor'
            COOLDOWNPERIOD: 180
          min_instances: 1
          max_instances: 5
    -  scalability:
        type: tosca.policies.Scaling.MiCADO.Container.CPU.fd-cloud
        targets: [ fd-cloud ]
        properties:
          sources:
          - 00.000.000.000:8080
          - 00.000.000.000:9100
          constants:
            SERVICE_NAME: 'fd-cloud'
            SERVICE_FULL_NAME: 'fd-cloud'
          min_instances: 1
          max_instances: 3

policy_types:
  tosca.policies.Scaling.MiCADO.Container.Network.fd-processor:
    derived_from: tosca.policies.Scaling.MiCADO
    description: base MiCADO policy defining data sources, constants, queries, alerts, limits and rules
    properties:
      queries:
        type: string
        default:
          RECEIVEDBYTES: "sum(rate(container_network_receive_bytes_total{container_label_io_kubernetes_pod_name=~'fd-receiver.*'}[2m])*100)"
      scaling_rule:
        type: string
        description: pre-define scaling rule for container CPU
        default: |
          if not RECEIVEDBYTES:
            RECEIVEDBYTES = 0
          if m_userdata is None:
            m_userdata = time.time()
          m_time_since_last_decision = time.time() - m_userdata
          rcv_bytes_inMB = 0
          req_container_count = 0
          if RECEIVEDBYTES > 0:
            rcv_bytes_inMB = RECEIVEDBYTES /float(1000000)
            req_container_count = 1 if rcv_bytes_inMB < 2 else ceil(rcv_bytes_inMB/2)
            if req_container_count != m_container_count and m_time_since_last_decision > COOLDOWNPERIOD:
              m_container_count = req_container_count
              m_userdata = time.time()
              m_time_since_last_decision = 0
          print('Received bytes (MB): ' + str(rcv_bytes_inMB))
          print('m_container_count: ' + str(m_container_count))
          print('required_container_count: ' + str(req_container_count))
          print('m_time_since_last_decision (seconds): ' + str(m_time_since_last_decision))
          print('cooldownperiod: ' + str(COOLDOWNPERIOD))
        required: true
  tosca.policies.Scaling.MiCADO.Container.CPU.fd-cloud:
    derived_from: tosca.policies.Scaling.MiCADO
    description: base MiCADO policy defining data sources, constants, queries, alerts, limits and rules
    properties:
      queries:
        type: string
        default:
          RECEIVEDBYTES: "sum(rate(container_network_receive_bytes_total{container_label_io_kubernetes_pod_name=~'fd-receiver.*'}[2m])*100)"
      scaling_rule:
        type: string
        description: pre-define scaling rule for container CPU
        default: |
          print('test policy')
        required: true
