tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - https://raw.githubusercontent.com/micado-scale/tosca/v0.x.2/micado_types.yaml


topology_template:
  node_templates:
    YOUR_APPLICATION_NODE_TYPE:
      ###############################################################################################
      ### Description of your application node you can find example in the applications directory ###
      ###############################################################################################
      
  policies:
    - scalability:
        type: tosca.policies.Scaling.MiCADO.Container.CPU
        targets: [ YOUR_APPLICATION_NODE_TYPE ]
        properties:
          constants:
            SERVICE_NAME: YOUR_SERVICE_NAME
            SERVICE_FULL_NAME: YOUR_SERVICE_FULL_NAME
            SERVICE_TH_MAX: '60' # Threshold max to be reach before scaling up the container
            SERVICE_TH_MIN: '20' # Threshold min to be reach before scaling down the container
          min_instances: 1 # Minimum container to run on the infrastructure
          max_instances: 3 # Maximum container to run on the infrastrucutre

policy_types:
  tosca.policies.Scaling.MiCADO.Container.CPU:
    derived_from: tosca.policies.Scaling.MiCADO
    description: base MiCADO policy defining data sources, constants, queries, alerts, limits and rules
    properties:
      alerts:
        type: list
        description: pre-define alerts for container CPU
        default:
        - alert: service_overloaded
          expr: 'avg(rate(container_network_receive_bytes_total{container_label_io_kubernetes_container_name="{{SERVICE_FULL_NAME}}"}[30s]))/1000 > {{SERVICE_TH_MAX}}'
          for: 30s
        - alert: service_underloaded
          expr: 'avg(rate(container_network_receive_bytes_total{container_label_io_kubernetes_container_name="{{SERVICE_FULL_NAME}}"}[30s]))/1000 < {{SERVICE_TH_MIN}}'
          for: 30s
        required: true
      scaling_rule:
        type: string
        description: pre-define scaling rule for container CPU
        default: |
          if len(m_nodes) == m_node_count:
            if service_overloaded and m_node_count > m_container_count-1:
              m_container_count+=1
            if service_underloaded:
              m_container_count-=1
          else:
            print('Transient phase, skipping update of containers...')
        required: true
